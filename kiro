#! /usr/bin/env ruby
require 'io/console'

KIRO_VERSION = "0.0.1"

# Syntax highlight types
HL_NORMAL = 0
HL_NONPRINT = 1
HL_COMMENT = 2 # Single line comment. 
HL_MLCOMMENT = 3 # Multi-line comment.
HL_KEYWORD1 = 4
HL_KEYWORD2 = 5
HL_STRING = 6
HL_NUMBER = 7
HL_MATCH = 8      # Search match

HL_HIGHLIGHT_STRINGS = (1<<0)
HL_HIGHLIGHT_NUMBERS = (1<<1)

Syntax = Struct.new(
  "Syntax",
  :filematch,
  :keywords,
  :singleline_comment_start,
  :multiline_comment_start,
  :multiline_comment_end,
  :flags
)

# This structure represents a single line of the file we are editing.
Row = Struct.new(
  "Row",
  :idx,         # Row index in the file, zero-based.
  :chars,       # Row content.
  :render,      # Row content "rendered" for screen (for TABs).
  :hl,          # Syntax highlight type for each character in render
  :hl_oc        # Row had open comment at end in last syntax highlight check.
)

Hlcolor = Struct.new(
  "Hlcolor",
  :r, :g, :b
)

EditorConfig = Struct.new(
  "EditorConfig",
  :cx, :cy,    # Cursor x and y position in characters
  :rowoff,     # Offset of row displayed.
  :coloff,     # Offset of column displayed.
  :screenrows, # Number of rows that we can show
  :screencols, # Number of cols that we can show
  :rawmode,    # Is terminal raw mode enabled?
  :rows,       # Rows
  :dirty,      # File modified but not saved.
  :filename,   # Currently open filename
  :statusmsg,
  :statusmsg_time,
)

E = EditorConfig.new

# module KEY_ACTION
KEY_NULL = 0       # NULL
CTRL_C = 3         # Ctrl-c
CTRL_D = 4         # Ctrl-d
CTRL_F = 6         # Ctrl-f
CTRL_H = 8         # Ctrl-h
TAB = 9            # Tab
CTRL_L = 12        # Ctrl+l
ENTER = 13         # Enter
CTRL_Q = 17        # Ctrl-q
CTRL_S = 19        # Ctrl-s
CTRL_U = 21        # Ctrl-u
ESC = 27           # Escape
BACKSPACE =  127   # Backspace
# The following are just soft codes, not really reported by the terminal directly.
ARROW_LEFT = 1000
ARROW_RIGHT = 1001
ARROW_UP = 1002
ARROW_DOWN = 1003
DEL_KEY = 1004
HOME_KEY = 1005
END_KEY = 1006
PAGE_UP = 1007
PAGE_DOWN = 1008

# Read a key from the terminal put in raw mode, trying to handle
# escape sequences.
#
# @return [Integer]
def editorReadKey(fd)
  chars = fd.readpartial(3)
  c, seq = chars[0], chars[1..-1]

  case c.ord
  when ESC    # escape sequence */
    # If this is just an ESC, we'll timeout here. */
    return ESC unless seq[0]
    return ESC unless seq[1]

    # ESC [ sequences. */
    if seq[0] == '['
      if seq[1] >= '0' && seq[1] <= '9'
        # Extended escape, read additional byte. */
        return ESC unless (seq[2] = fd.read(1))

        if seq[2] == '~'
          case seq[1]
          when '3'; return DEL_KEY
          when '5'; return PAGE_UP
          when '6'; return PAGE_DOWN
          end
        end
      else
        case seq[1]
        when 'A'; return ARROW_UP
        when 'B'; return ARROW_DOWN
        when 'C'; return ARROW_RIGHT
        when 'D'; return ARROW_LEFT
        when 'H'; return HOME_KEY
        when 'F'; return END_KEY
        end
      end
      # ESC O sequences. */
    elsif seq[0] == 'O'
      case seq[1]
      when 'H'; return HOME_KEY
      when 'F'; return END_KEY
      end
    end
  else
    return c.ord
  end
end

# Use the ESC [6n escape sequence to query the horizontal cursor position
# and return it. On error -1 is returned, on success the position of the
# cursor is stored at *rows and *cols and 0 is returned.
def getCursorPosition(ifd, ofd)
  # Report cursor location
  return nil if ofd.write("\x1b[6n") != 4

  # Read the response: ESC [ rows ; cols R
  buf = ""
  i = 0
  while i < 31
    break unless (buf[i] = ifd.read(1))
    break if buf[i] == 'R'
    i += 1
  end

  # Parse it.
  return nil if (buf[0].ord != ESC || buf[1] != '[') 
  rows, cols = buf[2..-1].scanf("%d%d")
  return nil unless cols
  [rows, cols]
end

# Try to get the number of columns in the current terminal. If the ioctl()
# call fails the function will try to query the terminal itself.
# Returns 0 on success, -1 on error.
def getWindowSize(ifd, ofd)
  # if (ioctl(1, TIOCGWINSZ, &ws) == -1 || ws.ws_col == 0) {
  rows, cols = $stdout.winsize
  if cols.nil?
    # ioctl() failed. Try to query the terminal itself.

    # Get the initial position so we can restore it later.
    orig_row, orig_col = getCursorPosition(ifd,ofd)
    return nil if orig_col.nil?

    # Go to right/bottom margin and get position.
    return nil if ofd.write("\x1b[999C\x1b[999B") != 12
    rows, cols = getCursorPosition(ifd,ofd)
    return nil if cols.nil?

    # Restore position.
    seq = sprintf("\x1b[%d%dH",orig_row,orig_col)
    ofd.write(seq)
  end
  [rows, cols]
end

# ======================= Editor rows implementation =======================

# Update the rendered version and the syntax highlight of a row.
def editorUpdateRow(row)
  tabs = 0
  nonprint = 0

  # Create a version of the row we can directly print on the screen,
  # respecting tabs, substituting non printable characters with '?'.
  row.chars.size.times do |j|
    tabs += 1 if row.chars[j].chr == TAB
  end

  idx = 0
  row.render = ''
  row.chars.size.times do |j|
    if row.chars[j].chr == TAB
      idx += 1
      row.render << ' '
      while ((idx+1) % 8 != 0) do
        idx += 1
        row.render << ' '
      end
    else
      idx +=1 
      row.render << row.chars[j]
    end
  end

  # Update the syntax highlighting attributes of the row.
  # editorUpdateSyntax(row)
end

## Insert a row at the specified position, shifting the other rows on the bottom
## if required.
def editorInsertRow(at, s)
  return if at > E.rows.size
  E.rows.insert(at, Row.new)
  if at != E.rows.size
    (at+1 .. E.rows.size-1).each {|j| E.rows[j].idx += 1 }
  end
  E.rows[at].chars = s
  E.rows[at].hl = []
  E.rows[at].hl_oc = 0
  E.rows[at].render = ''
  E.rows[at].idx = at
  editorUpdateRow(E.rows[at])
  E.dirty += 1
end

# Remove the row at the specified position, shifting the remainign on the
# top.
def editorDelRow(at)
  return if (at >= E.rows.size)
  E.rows.delete(at)
  E.dirty += 1
end

# Turn the editor rows into a single heap-allocated string.
# Returns the pointer to the heap-allocated string and populate the
# integer pointed by 'buflen' with the size of the string, escluding
# the final nulterm.
def editorRowsToString
  E.rows.map(&:chars).join("\n")
end

# Insert a character at the specified position in a row, moving the remaining
# chars on the right if needed.
def editorRowInsertChar(row, at, c)
  if at > row.chars.size
    # Pad the string with spaces if the insert location is outside the
    # current length by more than a single character.
    padlen = at-row.chars.size
    # In the next line +2 means: new char and null term.
    row.chars << ' ' * padlen
  else
    # If we are in the middle of the string just make space for 1 new
    # char plus the (already existing) null term.
    row.chars.insert(at, c.chr)
    editorUpdateRow(row)
    E.dirty += 1
  end
end

## Append the string 's' at the end of a row
def editorRowAppendString(row, s)
  row.chars << s
  editorUpdateRow(row)
  E.dirty += 1
end

# Delete the character at offset 'at' from the specified row.
def editorRowDelChar(row, at)
  return if row.chars.size <= at
  row.chars.slice!(at)
  editorUpdateRow(row)
  E.dirty += 1
end

# Insert the specified char at the current prompt position.
def editorInsertChar(c)
  filerow = E.rowoff+E.cy
  filecol = E.coloff+E.cx
  row = (filerow >= E.rows.size) ? nil : E.rows[filerow]

  # If the row where the cursor is currently located does not exist in our
  # logical representaion of the file, add enough empty rows as needed.
  unless row
    while E.rows.size <= filerow
      editorInsertRow(E.rows.size,"")
    end
  end
  row = E.rows[filerow]
  editorRowInsertChar(row, filecol, c)
  if E.cx == E.screencols-1
    E.coloff += 1
  else
    E.cx += 1
  end
  E.dirty += 1
end

# Inserting a newline is slightly complex as we have to handle inserting a
# newline in the middle of a line, splitting the line as needed.
def editorInsertNewline
  filerow = E.rowoff+E.cy
  filecol = E.coloff+E.cx
  row = (filerow >= E.rows.size) ? nil : E.rows[filerow]

  if !row
    if filerow == E.rows.size
      editorInsertRow(filerow,"")
      fixcursor
    end
    return
  end

  # If the cursor is over the current line size, we want to conceptually
  # think it's just over the last character.
  filecol = row.chars.size if filecol >= row.chars.size
  if filecol == 0
    editorInsertRow(filerow, "")
  else
    # We are in the middle of a line. Split it between two rows.
    cut = row.chars.slice!(filecol, (row.chars.size-filecol))
    editorInsertRow(filerow+1, cut)
    row = E.rows[filerow]
    editorUpdateRow(row)
  end
  fixcursor
end

def fixcursor
  if E.cy == E.screenrows-1
    E.rowoff += 1
  else
    E.cy += 1
  end
  E.cx = 0
  E.coloff = 0
end

## Delete the char at the current prompt position.
def editorDelChar
  filerow = E.rowoff+E.cy;
  filecol = E.coloff+E.cx;
  row = (filerow >= E.rows.size) ? nil : E.rows[filerow]

  return if (!row || (filecol == 0 && filerow == 0))
  if filecol == 0
    # Handle the case of column 0, we need to move the current line
    # on the right of the previous one.
    filecol = E.rows[filerow-1].chars.size
    editorRowAppendString(E.rows[filerow-1], row.chars)
    editorDelRow(filerow);
    row = nil
    if E.cy == 0
      E.rowoff -= 1
    else
      E.cy -= 1
    end
    E.cx = filecol;
    if E.cx >= E.screencols
      shift = (E.screencols-E.cx)+1
      E.cx -= shift
      E.coloff += shift
    end
  else
    editorRowDelChar(row,filecol-1)
    if E.cx == 0 && E.coloff > 0
      E.coloff -= 1
    else
      E.cx -= 1
    end
  end
  editorUpdateRow(row) if row
  E.dirty += 1
end

# Load the specified program in the editor memory and returns 0 on success
# or 1 on error.
def editorOpen(filename)
  E.dirty = 0
  E.filename = filename.dup
  begin
    open(filename, "r") do |fp|
      fp.each_line do |line|
        editorInsertRow(E.rows.size, line.chomp)
      end
    end
  rescue Errno::ENOENT => e
    return 1
  end
  E.dirty = 0
  return 0
end

# Save the current file on disk. Return 0 on success, 1 on error.
def editorSave
  buf = editorRowsToString
  begin
    open(E.filename, 'w', 0644) do |fd|
      fd.write(buf)
      E.dirty = 0
      editorSetStatusMessage(sprintf("%d bytes written on disk", buf.size))
      return 0
    end
  rescue => e
    editorSetStatusMessage(sprintf("Can't save! I/O error: %s", e.message))
    return 1
  end
end

# ============================= Terminal update ============================

# This function writes the whole screen using VT100 escape characters
# starting from the logical state of the editor in the global state 'E'.
def editorRefreshScreen
  ab = ''

  ab << "\x1b[?25l" # Hide cursor.
  ab << "\x1b[H" # Go home.
  (0 ... E.screenrows).each do |y|
    filerow = E.rowoff+y;

    if filerow >= E.rows.size
      if E.rows.size == 0 && y == E.screenrows/3
        welcome = sprintf("Kilo editor -- verison %s\x1b[0K\r\n", KIRO_VERSION)
        padding = (E.screencols-welcome.size)/2
        if padding > 0
          ab << "~"
          padding -= 1
        end
        while padding > 0
          padding -= 1
          ab << " "
        end
        ab << welcome
      else
        ab << "~\x1b[0K\r\n"
      end
      next
    end

    r = E.rows[filerow]

    len = r.render.size - E.coloff;
    if len > 0
      len = E.screencols if len > E.screencols
      ab << r.render[E.coloff, len]
    end
    ab << "\x1b[39m"
    ab << "\x1b[0K"
    ab << "\r\n"
  end

  # Create a two rows status. First row:
  ab << "\x1b[0K"
  ab << "\x1b[7m"
  status = sprintf("%.20s - %d lines %s", E.filename, E.rows.size, E.dirty ? "(modified)" : "")
  rstatus = sprintf("%d/%d",E.rowoff+E.cy+1,E.rows.size)
  len = status.size
  len = E.screencols if len > E.screencols
  ab << status[0, len]
  rlen = rstatus.size
  while len < E.screencols
    if E.screencols - len == rlen
      ab << rstatus[0, rlen]
      break
    else
      ab << " "
      len += 1 
    end
  end
  ab << "\x1b[0m\r\n"

  # Second row depends on E.statusmsg and the status message update time.
  ab << "\x1b[0K"
  msglen = E.statusmsg.size
  if msglen > 0 && Time.now.to_i-E.statusmsg_time < 5
    ab << E.statusmsg[0, (msglen <= E.screencols ? msglen : E.screencols)]
  end

  # Put cursor at its current position. Note that the horizontal position
  # at which the cursor is displayed may be different compared to 'E.cx'
  # because of TABs.
  cx = 1
  filerow = E.rowoff+E.cy
  row = (filerow >= E.rows.size) ? nil : E.rows[filerow]
  if row
    (E.coloff ... (E.cx+E.coloff)).each do |j|
      if j < row.chars.size && row.chars[j].ord == TAB
        cx += 7-((cx)%8)
      end
      cx += 1
    end
  end
  buf = sprintf("\x1b[%d;%dH",E.cy+1,cx)
  ab << buf
  ab << "\x1b[?25h" # Show cursor.
  $stdout.write(ab)
end

# Set an editor status message for the second line of the status, at the
# end of the screen.
def editorSetStatusMessage(msg)
  E.statusmsg = msg
  E.statusmsg_time = Time.now.to_i
end

# ========================= Editor events handling  ========================

# Handle cursor position change because arrow keys were pressed.
def editorMoveCursor(key)
  filerow = E.rowoff+E.cy
  filecol = E.coloff+E.cx
  rowlen = nil
  row = (filerow >= E.rows.size) ? nil : E.rows[filerow]

  case key
  when ARROW_LEFT
    if E.cx == 0
      if E.coloff != 0
        E.coloff -= 1
      else
        if filerow > 0
          E.cy -= 1
          E.cx = E.rows[filerow-1].size
          if E.cx > E.screencols-1
            E.coloff = E.cx-E.screencols+1
            E.cx = E.screencols-1
          end
        end
      end
    else
      E.cx -= 1
    end
  when ARROW_RIGHT
    if row && filecol < row.chars.size
      if E.cx == E.screencols-1
        E.coloff += 1
      else
        E.cx += 1
      end
    elsif row && filecol == row.chars.size
      E.cx = 0
      E.coloff = 0
      if E.cy == E.screenrows-1
        E.rowoff += 1
      else
        E.cy += 1
      end
    end
  when ARROW_UP
    if E.cy == 0
      if E.rowoff != 0
        E.rowoff -= 0
      end
    else
      E.cy -= 1
    end
  when ARROW_DOWN
    if filerow < E.rows.size
      if E.cy == E.screenrows-1
        E.rowoff += 1
      else
        E.cy += 1
      end
    end
  end
  # Fix cx if the current line has not enough chars.
  filerow = E.rowoff+E.cy
  filecol = E.coloff+E.cx
  row = (filerow >= E.rows.size) ? nil : E.rows[filerow]
  rowlen = row ? row.chars.size : 0
  if filecol > rowlen
    E.cx -= filecol-rowlen
    if E.cx < 0
      E.coloff += E.cx
      E.cx = 0
    end
  end
end

# Process events arriving from the standard input, which is, the user
# is typing stuff on the terminal.
KIRO_QUIT_TIMES = 3
# When the file is modified, requires Ctrl-q to be pressed N times
# before actually quitting.
$quit_times = KIRO_QUIT_TIMES
def editorProcessKeypress(fd)
  c = editorReadKey(fd) # int
  case c
  when ENTER         # Enter
    editorInsertNewline
  when CTRL_C        # Ctrl-c
    # We ignore ctrl-c, it can't be so simple to lose the changes
    # to the edited file.
  when CTRL_Q        # Ctrl-q
    # Quit if the file was already saved.
    if E.dirty > 0 && $quit_times > 0
      editorSetStatusMessage(sprintf(
        "WARNING!!! File has unsaved changes. " \
        "Press Ctrl-Q %d more times to quit.", $quit_times))
      $quit_times -= 1
      return
    end
    exit 0
  when CTRL_S        # Ctrl-s
    editorSave()
  # when CTRL_F
  #   editorFind(fd)
  when BACKSPACE, CTRL_H, DEL_KEY
    editorDelChar()
  when PAGE_UP, PAGE_DOWN
    if c == PAGE_UP && E.cy != 0
      E.cy = 0
    elsif (c == PAGE_DOWN && E.cy != E.screenrows-1)
      E.cy = E.screenrows-1
    end
    times = E.screenrows
    times.times do
      editorMoveCursor(c == PAGE_UP ? ARROW_UP : ARROW_DOWN)
    end
  when ARROW_UP, ARROW_DOWN, ARROW_LEFT, ARROW_RIGHT
    editorMoveCursor(c)
  when CTRL_L # ctrl+l, clear screen
    # Just refresh the line as side effect.
  when ESC
    # Nothing to do for ESC in this mode.
  else
    editorInsertChar(c)
  end

  $quit_times = KIRO_QUIT_TIMES # Reset it to the original value.
end

def editor_file_was_modified
  E.dirty
end

def initEditor
  E.cx = 0
  E.cy = 0
  E.rowoff = 0
  E.coloff = 0
  E.rows = []
  E.dirty = 0
  E.filename = nil
  E.screenrows, E.screencols = getWindowSize($stdin, $stdout)
  if E.screencols.nil?
    $stderr.puts "Unable to query the screen for size (columns / rows)"
    exit 1
  end
  E.screenrows -= 2 # Get room for status bar
end

def main
  if ARGV.size != 1
    $stderr.puts "Usage: kilo <filename>\n"
    exit 1
  end

  initEditor
  # editorSelectSyntaxHighlight(ARGV[0])
  editorOpen(ARGV[0])
  $stdin.raw do |io|
    editorSetStatusMessage(
      "HELP: Ctrl-S = save | Ctrl-Q = quit | Ctrl-F = find")
    while true
      editorRefreshScreen
      editorProcessKeypress(io)
    end
  end
end

def debug(c)
  open('/tmp/kiro_debug', 'a') do |fp|
    fp.puts c.to_s
  end
end

main
